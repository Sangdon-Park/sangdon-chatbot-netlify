// Performance Test Suite with Real-World Questions
const fetch = require('node-fetch');

const PROD_URL = 'https://sangdon-chatbot.netlify.app/.netlify/functions/chat-ai-driven';

// Realistic test cases that people might actually ask
const REALISTIC_TESTS = [
  // === Ïù∏ÏÇ¨ Î∞è ÏÜåÍ∞ú ===
  { category: 'Ïù∏ÏÇ¨', query: 'ÏïàÎÖïÌïòÏÑ∏Ïöî Î∞ïÏÉÅÎèà ÍµêÏàòÎãò', expectType: 'greeting' },
  { category: 'Ïù∏ÏÇ¨', query: 'ÏûêÍ∏∞ÏÜåÍ∞ú Ìï¥Ï£ºÏÑ∏Ïöî', expectType: 'intro' },
  { category: 'Ïù∏ÏÇ¨', query: 'Î≠êÌïòÎäî ÏÇ¨ÎûåÏù¥Ïïº?', expectType: 'intro' },
  
  // === Í≤ΩÎ†• Î∞è Î∞∞Í≤Ω ===
  { category: 'Í≤ΩÎ†•', query: 'Ïñ¥ÎîîÏÑú ÏùºÌï¥?', expectType: 'work' },
  { category: 'Í≤ΩÎ†•', query: 'ÏÑ∏Ïù¥Î≤†Î¶¨Í≤åÏûÑÏ¶à Î≠êÌïòÎäî ÌöåÏÇ¨Ïïº?', expectType: 'work' },
  { category: 'Í≤ΩÎ†•', query: 'KAISTÏóêÏÑú Î≠ê ÌñàÏñ¥?', expectType: 'work' },
  { category: 'Í≤ΩÎ†•', query: 'Î∞ïÏÇ¨Îäî Ïñ∏Ï†ú Î∞õÏïòÏñ¥?', expectType: 'education' },
  { category: 'Í≤ΩÎ†•', query: 'Ï†ÑÍ≥µÏù¥ Î≠êÏïº?', expectType: 'education' },
  
  // === ÏÑ∏ÎØ∏ÎÇò/Í∞ïÏó∞ Í¥ÄÎ†® Ïã§Ï†ú ÏßàÎ¨∏Îì§ ===
  { category: 'ÏÑ∏ÎØ∏ÎÇò', query: 'ÏÑ∏ÎØ∏ÎÇò ÏùòÎ¢∞ÌïòÎ†§Î©¥ Ïñ¥ÎñªÍ≤å Ìï¥ÏïºÎèº?', expectKeyword: '50ÎßåÏõê' },
  { category: 'ÏÑ∏ÎØ∏ÎÇò', query: 'Í∞ïÏó∞ Ï£ºÏ†úÎäî Î≠êÎ≠ê Ìï† Ïàò ÏûàÏñ¥?', expectKeyword: 'AI' },
  { category: 'ÏÑ∏ÎØ∏ÎÇò', query: 'Ïñ¥Îäê ÎåÄÌïôÏóêÏÑú ÎßéÏù¥ Î∂àÎü¨?', expectKeyword: 'KAIST' },
  { category: 'ÏÑ∏ÎØ∏ÎÇò', query: 'ÏµúÍ∑ºÏóê Ìïú ÏÑ∏ÎØ∏ÎÇòÎäî?', expectKeyword: 'Í≤ΩÏÉÅÍµ≠Î¶ΩÎåÄ' },
  { category: 'ÏÑ∏ÎØ∏ÎÇò', query: 'Í≥†Î†§ÎåÄÏóêÏÑú Î≠ê Î∞úÌëúÌñàÏñ¥?', expectKeyword: 'Í≥†Î†§ÎåÄ' },
  { category: 'ÏÑ∏ÎØ∏ÎÇò', query: 'LLM Í¥ÄÎ†® ÏÑ∏ÎØ∏ÎÇò Ìïú Ï†Å ÏûàÏñ¥?', expectKeyword: 'LLM' },
  { category: 'ÏÑ∏ÎØ∏ÎÇò', query: 'ÏÑ∏ÎØ∏ÎÇò ÏöîÏ≤≠ÌïòÎ©¥ Ïñ¥Îñ§ ÎÇ¥Ïö©ÏúºÎ°ú Ìï¥Ï§Ñ Ïàò ÏûàÏñ¥?', expectKeyword: 'AI' },
  { category: 'ÏÑ∏ÎØ∏ÎÇò', query: 'Îã§ÏùåÎã¨Ïóê ÏÑ∏ÎØ∏ÎÇò Í∞ÄÎä•Ìï¥?', expectKeyword: 'ÏÑ∏ÎØ∏ÎÇò' },
  
  // === ÎÖºÎ¨∏/Ïó∞Íµ¨ Í¥ÄÎ†® Ïã§Ï†ú ÏßàÎ¨∏Îì§ ===
  { category: 'ÎÖºÎ¨∏', query: 'ÏµúÍ∑º ÎÖºÎ¨∏ Î≠ê ÏçºÏñ¥?', expectKeyword: '2024' },
  { category: 'ÎÖºÎ¨∏', query: 'Ïó£ÏßÄ Ïª¥Ìì®ÌåÖ Í¥ÄÎ†® ÎÖºÎ¨∏ ÏûàÏñ¥?', expectKeyword: 'edge' },
  { category: 'ÎÖºÎ¨∏', query: 'IEEEÏóê ÎÖºÎ¨∏ ÎÇ∏ Í±∞ ÏûàÏñ¥?', expectKeyword: 'IEEE' },
  { category: 'ÎÖºÎ¨∏', query: 'Ï†úÏùº ÏûêÎûëÏä§Îü¨Ïö¥ ÎÖºÎ¨∏ÏùÄ?', expectKeyword: 'ÎÖºÎ¨∏' },
  { category: 'ÎÖºÎ¨∏', query: 'Î∞ïÏÇ¨ÎÖºÎ¨∏ Ï£ºÏ†úÍ∞Ä Î≠êÏòÄÏñ¥?', expectKeyword: 'ÏóêÎÑàÏßÄ' },
  { category: 'ÎÖºÎ¨∏', query: 'IoT Í¥ÄÎ†® Ïó∞Íµ¨Ìïú Ï†Å ÏûàÏñ¥?', expectKeyword: 'IoT' },
  
  // === AI/Í∏∞Ïà† Í¥ÄÎ†® ÏßàÎ¨∏ ===
  { category: 'AI', query: 'ClaudeÎûë ChatGPT Ï§ë Î≠êÍ∞Ä ÎÇòÏïÑ?', expectType: 'ai_opinion' },
  { category: 'AI', query: 'AIÎ°ú Î≠ê ÎßåÎì§Ïñ¥Î≥∏ Í±∞ ÏûàÏñ¥?', expectKeyword: 'AI' },
  { category: 'AI', query: 'Î∞îÏù¥Î∏å ÏΩîÎî©Ïù¥ Î≠êÏïº?', expectKeyword: 'vibe' },
  { category: 'AI', query: 'LLM Ïñ¥ÎñªÍ≤å ÌôúÏö©ÌïòÍ≥† ÏûàÏñ¥?', expectKeyword: 'LLM' },
  { category: 'AI', query: 'AI Ï∫êÎ¶≠ÌÑ∞ ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Î™ÖÌï¥Ï§ò', expectKeyword: 'Ï∫êÎ¶≠ÌÑ∞' },
  
  // === ÌòëÏóÖ/ÎÑ§Ìä∏ÏõåÌÇπ ===
  { category: 'ÌòëÏóÖ', query: 'Í∞ôÏù¥ Ïó∞Íµ¨ÌïòÍ≥† Ïã∂ÏùÄÎç∞ Ïó∞ÎùΩÏ≤òÎäî?', expectKeyword: 'chaos' },
  { category: 'ÌòëÏóÖ', query: 'ÎàÑÍµ¨Îûë ÎßéÏù¥ Ïó∞Íµ¨Ìï¥?', expectKeyword: 'ÏµúÏ§ÄÍ∑†' },
  { category: 'ÌòëÏóÖ', query: 'Í≥µÎèôÏó∞Íµ¨ Ï†úÏïàÌïòÎ†§Î©¥?', expectType: 'contact' },
  
  // === Íµ¨Ï≤¥Ï†ÅÏù∏ Ï†ïÎ≥¥ ÏöîÏ≤≠ ===
  { category: 'Ï†ïÎ≥¥', query: 'ÏÑ∏ÎØ∏ÎÇò Î™áÏãúÍ∞ÑÏù¥Ïïº?', expectKeyword: '1ÏãúÍ∞Ñ 30Î∂Ñ' },
  { category: 'Ï†ïÎ≥¥', query: 'Í∞ïÏó∞Î£å ÏñºÎßàÏïº?', expectKeyword: '50ÎßåÏõê' },
  { category: 'Ï†ïÎ≥¥', query: 'ÎÖºÎ¨∏ Î™áÌé∏?', expectKeyword: '25' },
  { category: 'Ï†ïÎ≥¥', query: 'ÏÑ∏ÎØ∏ÎÇò Î™áÎ≤à?', expectKeyword: '13' },
  
  // === Ïû°Îã¥/Í∏∞ÌÉÄ ===
  { category: 'Ïû°Îã¥', query: 'Ïò§Îäò ÎÇ†Ïî® Ïñ¥Îïå?', expectType: 'chat' },
  { category: 'Ïû°Îã¥', query: 'Ï†êÏã¨ Î≠ê Î®πÏóàÏñ¥?', expectType: 'chat' },
  { category: 'Ïû°Îã¥', query: 'Í∞êÏÇ¨Ìï©ÎãàÎã§', expectType: 'thanks' }
];

// Performance measurement function
async function measurePerformance(test) {
  const startTime = Date.now();
  const metrics = {
    step1Time: 0,
    step2Time: 0,
    totalTime: 0,
    success: false,
    error: null
  };

  try {
    // Step 1: Intent classification
    const step1Start = Date.now();
    const step1Response = await fetch(PROD_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message: test.query, step: 1 })
    });
    metrics.step1Time = Date.now() - step1Start;

    if (!step1Response.ok) {
      throw new Error(`Step 1 failed: ${step1Response.status}`);
    }

    const step1Data = await step1Response.json();

    // Step 2 if needed
    if (step1Data.action === 'SEARCH') {
      const step2Start = Date.now();
      const step2Response = await fetch(PROD_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: test.query,
          step: 2,
          action: step1Data.action,
          query: step1Data.query || test.query
        })
      });
      metrics.step2Time = Date.now() - step2Start;

      if (!step2Response.ok) {
        throw new Error(`Step 2 failed: ${step2Response.status}`);
      }

      const step2Data = await step2Response.json();
      
      // Check if response contains expected keyword
      if (test.expectKeyword) {
        const responseText = (step2Data.reply || '').toLowerCase();
        const searchText = (step2Data.searchResults || []).join(' ').toLowerCase();
        const combined = responseText + ' ' + searchText;
        metrics.success = combined.includes(test.expectKeyword.toLowerCase());
      } else {
        metrics.success = true;
      }
    } else {
      // CHAT response
      metrics.success = step1Data.action === 'CHAT';
      if (test.expectKeyword) {
        const responseText = (step1Data.initialMessage || '').toLowerCase();
        metrics.success = responseText.includes(test.expectKeyword.toLowerCase());
      }
    }

    metrics.totalTime = Date.now() - startTime;
    
  } catch (error) {
    metrics.error = error.message;
    metrics.totalTime = Date.now() - startTime;
  }

  return metrics;
}

// Main test runner
async function runPerformanceTests() {
  console.log('üöÄ Performance Test Suite');
  console.log('=' .repeat(80));
  console.log(`Testing ${REALISTIC_TESTS.length} realistic scenarios`);
  console.log(`URL: ${PROD_URL}`);
  console.log('=' .repeat(80));
  
  const results = [];
  const categoryMetrics = {};
  
  // Run tests with rate limiting
  for (const test of REALISTIC_TESTS) {
    process.stdout.write(`\n[${test.category}] "${test.query.substring(0, 40)}..."  `);
    
    const metrics = await measurePerformance(test);
    results.push({ ...test, ...metrics });
    
    // Update category metrics
    if (!categoryMetrics[test.category]) {
      categoryMetrics[test.category] = {
        count: 0,
        totalTime: 0,
        step1Total: 0,
        step2Total: 0,
        successes: 0,
        errors: 0
      };
    }
    
    const cat = categoryMetrics[test.category];
    cat.count++;
    cat.totalTime += metrics.totalTime;
    cat.step1Total += metrics.step1Time;
    cat.step2Total += metrics.step2Time;
    if (metrics.success) cat.successes++;
    if (metrics.error) cat.errors++;
    
    // Print inline result
    const icon = metrics.success ? '‚úÖ' : '‚ùå';
    const time = `${metrics.totalTime}ms`;
    console.log(`${icon} ${time}`);
    
    if (metrics.error) {
      console.log(`   Error: ${metrics.error}`);
    } else if (!metrics.success && test.expectKeyword) {
      console.log(`   Missing: "${test.expectKeyword}"`);
    }
    
    // Rate limiting
    await new Promise(resolve => setTimeout(resolve, 1500));
  }
  
  // Summary statistics
  console.log('\n' + '=' .repeat(80));
  console.log('üìä PERFORMANCE SUMMARY');
  console.log('=' .repeat(80));
  
  const totalTests = results.length;
  const successfulTests = results.filter(r => r.success).length;
  const avgTotalTime = results.reduce((sum, r) => sum + r.totalTime, 0) / totalTests;
  const avgStep1Time = results.reduce((sum, r) => sum + r.step1Time, 0) / totalTests;
  const avgStep2Time = results.filter(r => r.step2Time > 0).reduce((sum, r) => sum + r.step2Time, 0) / 
                       results.filter(r => r.step2Time > 0).length || 0;
  
  console.log('\nüìà Overall Metrics:');
  console.log(`   Success Rate: ${((successfulTests/totalTests)*100).toFixed(1)}% (${successfulTests}/${totalTests})`);
  console.log(`   Avg Total Time: ${avgTotalTime.toFixed(0)}ms`);
  console.log(`   Avg Step 1 Time: ${avgStep1Time.toFixed(0)}ms`);
  console.log(`   Avg Step 2 Time: ${avgStep2Time.toFixed(0)}ms`);
  
  // Find slowest queries
  const slowest = results.sort((a, b) => b.totalTime - a.totalTime).slice(0, 5);
  console.log('\nüê¢ Slowest Queries:');
  slowest.forEach(s => {
    console.log(`   ${s.totalTime}ms - "${s.query.substring(0, 50)}..."`);
  });
  
  // Find fastest queries
  const fastest = results.sort((a, b) => a.totalTime - b.totalTime).slice(0, 5);
  console.log('\n‚ö° Fastest Queries:');
  fastest.forEach(f => {
    console.log(`   ${f.totalTime}ms - "${f.query.substring(0, 50)}..."`);
  });
  
  // Category breakdown
  console.log('\nüìÅ By Category:');
  Object.entries(categoryMetrics).forEach(([category, metrics]) => {
    const avgTime = metrics.totalTime / metrics.count;
    const successRate = (metrics.successes / metrics.count * 100).toFixed(0);
    console.log(`   ${category}: ${successRate}% success, avg ${avgTime.toFixed(0)}ms`);
  });
  
  // Performance bottlenecks
  console.log('\nüî• Performance Analysis:');
  if (avgStep1Time > 1500) {
    console.log('   ‚ö†Ô∏è Step 1 (AI Classification) is slow: ' + avgStep1Time.toFixed(0) + 'ms');
    console.log('      ‚Üí Consider caching or rule-based classification');
  }
  if (avgStep2Time > 2000) {
    console.log('   ‚ö†Ô∏è Step 2 (Search & Response) is slow: ' + avgStep2Time.toFixed(0) + 'ms');
    console.log('      ‚Üí Consider pre-computing embeddings or reducing search scope');
  }
  if (avgTotalTime > 3500) {
    console.log('   ‚ö†Ô∏è Total response time exceeds 3.5s threshold');
    console.log('      ‚Üí Users may experience noticeable delays');
  }
  
  // Recommendations
  console.log('\nüí° Optimization Recommendations:');
  console.log('   1. Implement response caching for frequently asked questions');
  console.log('   2. Pre-compute and cache embeddings for all documents');
  console.log('   3. Use rule-based classification for common patterns');
  console.log('   4. Implement connection pooling for API calls');
  console.log('   5. Consider using CDN for static responses');
  
  // Save detailed results
  const report = {
    timestamp: new Date().toISOString(),
    url: PROD_URL,
    summary: {
      totalTests,
      successfulTests,
      successRate: ((successfulTests/totalTests)*100).toFixed(1) + '%',
      avgTotalTime: avgTotalTime.toFixed(0) + 'ms',
      avgStep1Time: avgStep1Time.toFixed(0) + 'ms',
      avgStep2Time: avgStep2Time.toFixed(0) + 'ms'
    },
    categoryMetrics,
    slowestQueries: slowest.slice(0, 10),
    fastestQueries: fastest.slice(0, 10),
    allResults: results
  };
  
  require('fs').writeFileSync(
    'performance-report.json',
    JSON.stringify(report, null, 2)
  );
  
  console.log('\nüìÑ Detailed report saved to performance-report.json');
  
  return report;
}

// Run tests
if (require.main === module) {
  runPerformanceTests().catch(console.error);
}

module.exports = { runPerformanceTests, measurePerformance };