// Ïó∞ÏÜç ÎåÄÌôî ÌÖåÏä§Ìä∏ - Ïã§Ï†ú ÎåÄÌôîÏ≤òÎüº Ïù¥Ïñ¥ÏßÄÎäî ÏßàÎ¨∏Îì§
const fetch = require('node-fetch');

const BASE_URL = 'https://sangdon-chatbot.netlify.app/.netlify/functions/chat-ai-driven';

async function chat(message, history = []) {
  try {
    const response1 = await fetch(BASE_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message, history, step: 1 })
    });
    
    if (!response1.ok) return `Error ${response1.status}`;
    const data1 = await response1.json();
    
    if (data1.needsSecondStep) {
      const response2 = await fetch(BASE_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message, history, step: 2,
          action: data1.action, query: data1.query
        })
      });
      
      if (!response2.ok) return `Error ${response2.status}`;
      const data2 = await response2.json();
      return data2.reply || 'No reply';
    }
    
    return data1.initialMessage || 'No reply';
  } catch (error) {
    return `Error: ${error.message}`;
  }
}

async function runTests() {
  console.log('üîÑ Ïó∞ÏÜç ÎåÄÌôî ÌÖåÏä§Ìä∏ - Ïã§Ï†ú ÏÇ¨Ïö©ÏûêÏ≤òÎüº');
  console.log('==================================================\n');

  const dialogues = [
    {
      name: 'üíº ÏÑ∏ÎØ∏ÎÇò Î¨∏Ïùò ÎåÄÌôî',
      intent: 'ÏÑ∏ÎØ∏ÎÇòÏóê Í¥ÄÏã¨ÏûàÎäî ÏÇ¨Ïö©ÏûêÏôÄÏùò Ïã§Ï†ú ÎåÄÌôî',
      conversation: [
        { q: "AI ÏÑ∏ÎØ∏ÎÇòÏóê ÎåÄÌï¥ Í∂ÅÍ∏àÌï©ÎãàÎã§", must: ["AI", "50ÎßåÏõê", "chaos@sayberrygames.com"] },
        { q: "ÎπÑÏã∏ÏßÄ ÏïäÏïÑ?", must: ["50ÎßåÏõê"], intent: "Í∞ÄÍ≤© Î∞òÏùë" },
        { q: "ÏãúÍ∞ÑÏùÄ?", must: ["ÏãúÍ∞Ñ"], intent: "ÏãúÍ∞Ñ ÌôïÏù∏" },
        { q: "ÎßûÏ∂§ÌòïÏù¥ Î≠îÎç∞?", must: ["Ï≤≠Ï§ë", "ÏàòÏ§Ä"], intent: "ÎßûÏ∂§Ìòï ÏÑ§Î™Ö" },
        { q: "Ïã†Ï≤≠ÏùÄ?", must: ["chaos@sayberrygames.com"], intent: "Ïã†Ï≤≠ Î∞©Î≤ï" },
        { q: "Ï¥ù Î™á Î≤à ÌñàÏñ¥?", must: ["13"], mustNot: ["25"], intent: "Í≤ΩÌóò ÌôïÏù∏" }
      ]
    },
    {
      name: 'üìö ÎÖºÎ¨∏/ÏÑ∏ÎØ∏ÎÇò Íµ¨Î∂Ñ ÎåÄÌôî',
      intent: 'ÎÖºÎ¨∏Í≥º ÏÑ∏ÎØ∏ÎÇòÎ•º Íµ¨Î∂ÑÌï¥ÏÑú Î¨ªÎäî ÎåÄÌôî',
      conversation: [
        { q: "ÎÖºÎ¨∏ Î™á Ìé∏ ÏçºÏñ¥?", must: ["25"], mustNot: ["13"] },
        { q: "ÏÑ∏ÎØ∏ÎÇòÎäî?", must: ["13"], mustNot: ["25"], intent: "ÏÑ∏ÎØ∏ÎÇòÎ°ú Ï†ÑÌôò" },
        { q: "Îçî ÎßéÎÑ§", must: [], intent: "ÎπÑÍµê Î∞òÏùë" },
        { q: "ÎëòÎã§ Ìï©ÏπòÎ©¥?", must: ["25", "13"], intent: "Î≥µÌï© Ï†ïÎ≥¥" },
        { q: "ÏµúÍ∑º ÎÖºÎ¨∏ÏùÄ?", must: ["2024"], intent: "ÏµúÍ∑º Ï†ïÎ≥¥" },
        { q: "Ïñ¥ÎîîÏÑú ÏÑ∏ÎØ∏ÎÇòÌñàÏñ¥?", must: ["KAIST"], intent: "Ïû•ÏÜå ÌôïÏù∏" }
      ]
    },
    {
      name: 'üéì ÎåÄÌïô ÏÑ∏ÎØ∏ÎÇò Î¨∏Ïùò',
      intent: 'ÌäπÏ†ï ÎåÄÌïô ÏÑ∏ÎØ∏ÎÇòÏóê ÎåÄÌïú Ïó∞ÏÜç ÏßàÎ¨∏',
      conversation: [
        { q: "Í≥†Î†§ÎåÄÏóêÏÑú ÏÑ∏ÎØ∏ÎÇò ÌñàÏñ¥?", must: ["Í≥†Î†§ÎåÄ"], mustNot: ["25", "13"] },
        { q: "Ïñ∏Ï†ú?", must: ["7Ïõî"], mustNot: ["2025"], intent: "ÎÇ†Ïßú ÌôïÏù∏" },
        { q: "Î¨¥Ïä® ÎÇ¥Ïö©?", must: ["AI"], intent: "ÎÇ¥Ïö© ÌôïÏù∏" },
        { q: "Í≤ΩÏÉÅÍµ≠Î¶ΩÎåÄÎäî?", must: ["8Ïõî"], mustNot: ["2025"], intent: "Îã§Î•∏ ÎåÄÌïô" },
        { q: "Î™áÏùº?", must: ["25Ïùº"], intent: "Íµ¨Ï≤¥Ï†Å ÎÇ†Ïßú" },
        { q: "KAISTÎèÑ ÌñàÎÇò?", must: ["KAIST"], intent: "Îòê Îã§Î•∏ ÎåÄÌïô" }
      ]
    },
    {
      name: 'üí∞ ÎπÑÏö© ÌòëÏÉÅ ÎåÄÌôî',
      intent: 'ÎπÑÏö©Ïóê ÎØºÍ∞êÌïú ÏÇ¨Ïö©ÏûêÏôÄÏùò ÎåÄÌôî',
      conversation: [
        { q: "ÏÑ∏ÎØ∏ÎÇò ÏñºÎßàÏïº?", must: ["50ÎßåÏõê"] },
        { q: "ÎÑàÎ¨¥ ÎπÑÏãºÎç∞", must: ["50ÎßåÏõê"], intent: "ÎπÑÏã∏Îã§Îäî Î∞òÏùë" },
        { q: "Ìï†Ïù∏ÏùÄ?", must: [], intent: "Ìï†Ïù∏ Î¨∏Ïùò" },
        { q: "ÏãúÍ∞ÑÎãπÏù¥Ïïº?", must: ["ÏãúÍ∞ÑÎãπ"], intent: "ÏãúÍ∞ÑÎãπ ÌôïÏù∏" },
        { q: "Î≥¥ÌÜµ Î™áÏãúÍ∞Ñ?", must: ["1", "2"], intent: "Ï¥ù ÏãúÍ∞Ñ" },
        { q: "Í∑∏Îüº ÏµúÎåÄ ÏñºÎßà?", must: ["100ÎßåÏõê"], intent: "ÏµúÎåÄ ÎπÑÏö©" }
      ]
    },
    {
      name: 'üîç Ï†ïÎ≥¥ ÌôïÏù∏ ÎåÄÌôî',
      intent: 'Ï†ïÎ≥¥Î•º ÌïòÎÇòÏî© ÌôïÏù∏ÌïòÎäî ÎåÄÌôî',
      conversation: [
        { q: "ÏÑ∏ÎØ∏ÎÇò 13Ìöå ÎßûÏïÑ?", must: ["13", "Îßû"], mustNot: ["25"] },
        { q: "ÎÖºÎ¨∏ÏùÄ?", must: ["25"], mustNot: ["13"], intent: "ÎÖºÎ¨∏ Ï†ÑÌôò" },
        { q: "25Ìé∏?", must: ["25", "Îßû"], intent: "ÌôïÏù∏" },
        { q: "ÏãúÍ∞ÑÎãπ 50ÎßåÏõê?", must: ["50ÎßåÏõê", "Îßû"], intent: "Í∞ÄÍ≤© ÌôïÏù∏" },
        { q: "Ïù¥Î©îÏùºÏù¥ Î≠êÏòÄÏßÄ?", must: ["chaos@sayberrygames.com"], intent: "Ïù¥Î©îÏùº Ïû¨ÌôïÏù∏" },
        { q: "Í≥†Î†§ÎåÄ 7Ïõî ÎßûÏßÄ?", must: ["7Ïõî", "Îßû"], intent: "ÎÇ†Ïßú ÌôïÏù∏" }
      ]
    },
    {
      name: 'ü§î Ïï†Îß§Ìïú ÏßàÎ¨∏ Ïó∞ÏÜç',
      intent: 'ÏßßÍ≥† Ïï†Îß§Ìïú ÏßàÎ¨∏Îì§Ïùò Ïó∞ÏÜç',
      conversation: [
        { q: "ÏÑ∏ÎØ∏ÎÇò", must: [], intent: "Îã®Ïàú Ïñ∏Í∏â" },
        { q: "Î≠êÏïº?", must: ["AI"], intent: "ÎÇ¥Ïö© Î¨ªÍ∏∞" },
        { q: "ÏñºÎßà?", must: ["50ÎßåÏõê"], intent: "Í∞ÄÍ≤©" },
        { q: "Ïñ∏Ï†ú?", must: [], intent: "ÏùºÏ†ï" },
        { q: "Ïñ¥ÎîîÏÑú?", must: [], intent: "Ïû•ÏÜå" },
        { q: "Î™áÎ≤à?", must: ["13"], intent: "ÌöüÏàò" }
      ]
    },
    {
      name: 'üîÑ Ï£ºÏ†ú Ï†ÑÌôò ÎåÄÌôî',
      intent: 'Ï£ºÏ†úÎ•º Í≥ÑÏÜç Î∞îÍæ∏Îäî ÎåÄÌôî',
      conversation: [
        { q: "ÎÖºÎ¨∏ ÏñòÍ∏∞ Ï¢Ä", must: ["25"], intent: "ÎÖºÎ¨∏ ÏãúÏûë" },
        { q: "ÏïÑÎãà ÏÑ∏ÎØ∏ÎÇòÎ°ú", must: ["13"], intent: "ÏÑ∏ÎØ∏ÎÇò Ï†ÑÌôò" },
        { q: "ÎπÑÏö©ÏùÄ?", must: ["50ÎßåÏõê"], intent: "ÎπÑÏö© ÏßàÎ¨∏" },
        { q: "Îã§Ïãú ÎÖºÎ¨∏", must: ["25"], intent: "ÎÖºÎ¨∏ Î≥µÍ∑Ä" },
        { q: "Í≥†Î†§ÎåÄ Ïñ∏Ï†ú?", must: ["7Ïõî"], intent: "ÎåÄÌïô Ï†ÑÌôò" },
        { q: "Ïó∞ÎùΩÏ≤ò", must: ["chaos@sayberrygames.com"], intent: "Ïó∞ÎùΩÏ≤ò" }
      ]
    }
  ];

  let totalTests = 0;
  let passedTests = 0;
  const failedDialogues = [];

  for (const dialogue of dialogues) {
    console.log(`\n${dialogue.name}`);
    console.log(`ÏùòÎèÑ: ${dialogue.intent}`);
    console.log('='.repeat(60));
    
    const history = [];
    let dialoguePassed = true;
    let stepNum = 0;
    
    for (const step of dialogue.conversation) {
      stepNum++;
      totalTests++;
      
      console.log(`\n  Step ${stepNum}: "${step.q}"`);
      if (step.intent) console.log(`  ÏùòÎèÑ: ${step.intent}`);
      
      const response = await chat(step.q, history);
      const responseLower = response.toLowerCase();
      
      // ÎåÄÌôî Í∏∞Î°ùÏóê Ï∂îÍ∞Ä
      history.push({ role: 'user', content: step.q });
      history.push({ role: 'assistant', content: response });
      
      let passed = true;
      const issues = [];
      
      // Must have check
      if (step.must) {
        for (const keyword of step.must) {
          if (!responseLower.includes(keyword.toString().toLowerCase())) {
            passed = false;
            issues.push(`ÎàÑÎùΩ: "${keyword}"`);
          }
        }
      }
      
      // Must not have check
      if (step.mustNot) {
        for (const keyword of step.mustNot) {
          if (responseLower.includes(keyword.toString().toLowerCase())) {
            passed = false;
            issues.push(`Í∏àÏßÄÏñ¥: "${keyword}"`);
          }
        }
      }
      
      if (passed) {
        passedTests++;
        console.log(`  ‚úÖ PASS`);
        console.log(`  ÏùëÎãµ: ${response.substring(0, 100)}...`);
      } else {
        dialoguePassed = false;
        console.log(`  ‚ùå FAIL`);
        issues.forEach(issue => console.log(`     ${issue}`));
        console.log(`  ÏùëÎãµ: ${response.substring(0, 100)}...`);
        
        if (!failedDialogues.find(d => d.name === dialogue.name)) {
          failedDialogues.push({
            name: dialogue.name,
            failedSteps: []
          });
        }
        const dialogueEntry = failedDialogues.find(d => d.name === dialogue.name);
        dialogueEntry.failedSteps.push({
          step: stepNum,
          question: step.q,
          issues: issues
        });
      }
    }
    
    const dialogueRate = dialoguePassed ? 100 : 
      Math.round((dialogue.conversation.length - failedDialogues.find(d => d.name === dialogue.name)?.failedSteps.length || 0) / dialogue.conversation.length * 100);
    
    console.log(`\n  üìä ÎåÄÌôî ÏÑ±Í≥µÎ•†: ${dialogueRate}%`);
  }

  // ÏµúÏ¢Ö Í≤∞Í≥º
  console.log('\n' + '='.repeat(70));
  console.log('üìà ÏµúÏ¢Ö Í≤∞Í≥º');
  console.log('='.repeat(70));
  
  const passRate = Math.round(passedTests/totalTests*100);
  console.log(`Ï¥ù ÏßàÎ¨∏: ${totalTests}`);
  console.log(`ÌÜµÍ≥º: ${passedTests}`);
  console.log(`Ïã§Ìå®: ${totalTests - passedTests}`);
  console.log(`ÌÜµÍ≥ºÏú®: ${passRate}%`);
  
  if (passRate >= 90) {
    console.log('\nüéâüéâüéâ Î™©Ìëú Îã¨ÏÑ±! 90% Ïù¥ÏÉÅ ÌÜµÍ≥º! üéâüéâüéâ');
    console.log('Ïó∞ÏÜç ÎåÄÌôîÏóêÏÑúÎèÑ ÏïàÏ†ïÏ†ÅÏúºÎ°ú ÏûëÎèôÌï©ÎãàÎã§!');
  } else if (passRate >= 80) {
    console.log('\n‚ú® ÏñëÌò∏! ÎåÄÎ∂ÄÎ∂ÑÏùò ÎåÄÌôîÍ∞Ä ÏûêÏó∞Ïä§ÎüΩÍ≤å ÏßÑÌñâÎê©ÎãàÎã§.');
  } else {
    console.log('\n‚ö†Ô∏è Í∞úÏÑ† ÌïÑÏöî. Ïó∞ÏÜç ÎåÄÌôîÏóêÏÑú Î¨∏Îß• Ïú†ÏßÄÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');
  }
  
  // Ïã§Ìå®Ìïú ÎåÄÌôî ÏöîÏïΩ
  if (failedDialogues.length > 0) {
    console.log('\nÏã§Ìå®Ìïú ÎåÄÌôî:');
    failedDialogues.forEach(d => {
      console.log(`\n  ${d.name}: ${d.failedSteps.length}Í∞ú Ïä§ÌÖù Ïã§Ìå®`);
      d.failedSteps.slice(0, 2).forEach(s => {
        console.log(`    Step ${s.step}: "${s.question}"`);
        console.log(`    Î¨∏Ï†ú: ${s.issues.join(', ')}`);
      });
    });
  }
  
  // JSON Í≤∞Í≥º Ï†ÄÏû•
  const fs = require('fs');
  fs.writeFileSync('continuous-dialogue-results.json', JSON.stringify({
    timestamp: new Date().toISOString(),
    passRate,
    total: totalTests,
    passed: passedTests,
    failed: totalTests - passedTests,
    failedDialogues: failedDialogues
  }, null, 2));
  
  console.log('\nÏÉÅÏÑ∏ Í≤∞Í≥º: continuous-dialogue-results.json');
}

console.log('‚è±Ô∏è Ïó∞ÏÜç ÎåÄÌôî ÌÖåÏä§Ìä∏ ÏãúÏûë... (ÏïΩ 3-4Î∂Ñ ÏÜåÏöî)\n');
runTests().catch(console.error);